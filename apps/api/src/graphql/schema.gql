# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type MessageResponse {
  message: String!
}

type FriendRequest {
  id: ID!
  user: User
  target: User
}

type AvatarImageInfo {
  avatarUrl: String
  avatarPublicId: String
}

type CoverImageInfo {
  coverUrl: String
  coverPublicId: String
}

type User {
  email: String!
  name: String!
  birthday: DateTime
  gender: EGender
  bio: String
  contact: String
  username: String!
  avatar: AvatarImageInfo!
  coverPicture: CoverImageInfo
  friends: User
  friendRequests: [FriendRequest!]
  password: String!
  role: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum EGender {
  male
  female
  unspecified
}

type UserWithoutPassword {
  email: String!
  name: String!
  birthday: DateTime
  gender: EGender
  bio: String
  contact: String
  username: String!
  avatar: AvatarImageInfo!
  coverPicture: CoverImageInfo
  friends: User
  friendRequests: [FriendRequest!]
  role: String!
}

type ProfileInformation {
  id: ID!
  username: String!
  name: String!
  birthday: DateTime
  gender: String
  bio: String
  contact: String
  avatar: AvatarImage
  email: String!
  coverPicture: CoverImage
  followingCount: Float
  followersCount: Float
  isFollowing: Boolean!
  isOwnProfile: Boolean!
}

type AvatarImage {
  avatarUrl: String
  avatarPublicId: String
}

type CoverImage {
  coverUrl: String
  coverPublicId: String
}

type PhotosImageInfo {
  photosUrl: String
  photosPublicId: String
}

type Post {
  _author_id: User
  content: String
  photos: [PhotosImageInfo!]
  likes: [User!]
  comments: [User!]

  """Created At"""
  createdAt: DateTime!

  """Updated At"""
  updatedAt: DateTime!
}

type Author {
  id: ID
  username: String!
  email: String!
  avatar: AvatarImage!
  name: String!
}

type NewsFeedPaginate {
  photos: [PhotosImageInfo!]
  content: String
  createdAt: DateTime
  updatedAt: DateTime
  author: Author!
  isLiked: Boolean
  isOwnPost: Boolean
  commentsCount: Float
  likesCount: Float
  id: String
}

type NewsFeedPagination {
  docs: [NewsFeedPaginate]
  totalDocs: Float!
  limit: Float!
  page: Float!
  totalPages: Float!
  hasNextPage: Boolean!
  hasPrevPage: Boolean!
  nextPage: Float
  prevPage: Float
  pagingCounter: Float!
}

type Notification {
  id: ID!
  type: NotificationType!
  target: ID
  initiator: ID
  unread: Boolean
  link: String
}

enum NotificationType {
  like
  follow
  commentLike
  comment
  reply
}

type NotificationPagination {
  docs: [Notification]
  totalDocs: Float!
  limit: Float!
  page: Float!
  totalPages: Float!
  hasNextPage: Boolean!
  hasPrevPage: Boolean!
  nextPage: Float
  prevPage: Float
  pagingCounter: Float!
}

type IUser {
  _id: ID!
  username: String!
  name: String!
  birthday: DateTime
  gender: String
  bio: String
  contact: String
  avatar: AvatarImage!
  email: String
  coverPicture: CoverImage
  isFollowing: Boolean!
}

type UserResponse {
  username: String!
  avatar: String!
}

type FriendRequestResponse {
  target: UserResponse!
  user: UserResponse!
}

type Pagination {
  username: String
  name: String!
  avatar: AvatarImage!
  birthday: DateTime
  gender: String
  bio: String
  contact: String
  id: String!
  email: String!
  isFollowing: Boolean!
}

type FollowPagination {
  docs: [Pagination]
  totalDocs: Float!
  limit: Float!
  page: Float!
  totalPages: Float!
  hasNextPage: Boolean!
  hasPrevPage: Boolean!
  nextPage: Float
  prevPage: Float
  pagingCounter: Float!
}

type LoginResponse {
  message: String!
}

input AvatarImageInput {
  avatarUrl: String
  avatarPublicId: String
}

input CoverImageInput {
  coverUrl: String
  coverPublicId: String
}

input PhotosImageInput {
  photosUrl: String
  photosPublicId: String
}

type Query {
  getFeeds(query: NewsFeedQueryArgs!, option: GetFeedDto!): NewsFeedPagination
  notifications(query: NotificationQueryArgs!, select: String, sort: String, skip: Float, lean: Boolean, leanWithId: Boolean, offset: Float, limit: Float = 10, page: Float = 1, pagination: Boolean, allowDiskUse: Boolean, forceCountFn: Boolean, useEstimatedCount: Boolean): NotificationPagination!
  post(postId: ID!): Post!
  getPosts(username: String!, query: NewsFeedQueryArgs!, option: GetFeedDto!): NewsFeedPagination!
  getPostLikes(query: LikesQueryArgs!, option: PaginateOptionArgs!): [GetLikeResponse!]!
  user(username: String!): ProfileInformation
  searchUser(query: SearchDto!, option: PaginateOptionArgs!): [IUser!]
  getFollowers(username: String!, query: FollowQueryArgs!, option: PaginateOptionArgs!): FollowPagination!
  getFollowing(username: String!, query: FollowQueryArgs!, option: PaginateOptionArgs!): FollowPagination!
  getSuggestionPeople(query: FollowQueryArgs!, option: PaginateOptionArgs!): FollowPagination
  me: IUser!
}

input NewsFeedQueryArgs {
  user: UserInputType
}

input UserInputType {
  email: String!
  name: String!
  birthday: DateTime
  gender: EGender
  bio: String
  contact: String
  username: String!
  avatar: AvatarImageInput!
  coverPicture: CoverImageInput
  friends: UserInputType
  friendRequests: [FriendRequestInputType!] = []
  password: String!
  role: String!
}

input FriendRequestInputType {
  user: UserInputType
  target: UserInputType
}

input GetFeedDto {
  select: String
  sort: String
  skip: Float
  lean: Boolean
  leanWithId: Boolean
  offset: Float
  limit: Float = 10
  page: Float = 1
  pagination: Boolean
  allowDiskUse: Boolean
  forceCountFn: Boolean
  useEstimatedCount: Boolean
  orderBy: QueryPostOrderByColumn = CREATED_AT
  sortedBy: SortOrder = DESC
}

enum QueryPostOrderByColumn {
  CREATED_AT
  RATING
  ORDERS
  UPDATED_AT
}

enum SortOrder {
  ASC
  DESC
}

input NotificationQueryArgs {
  user: ID
  targetId: ID
  type: String
  unread: Boolean
}

type GetLikeResponse {
  username: String!
  _id: ID!
  avatar: AvatarImage!
  name: String!
  isFollowing: Boolean!
}

input LikesQueryArgs {
  user: ID
  postId: ID
  commentId: ID
}

input PaginateOptionArgs {
  select: String
  sort: String
  skip: Float
  lean: Boolean
  leanWithId: Boolean
  offset: Float
  limit: Float = 10
  page: Float = 1
  pagination: Boolean
  allowDiskUse: Boolean
  forceCountFn: Boolean
  useEstimatedCount: Boolean
}

input SearchDto {
  keyword: String!
  user: UserInputType
}

input FollowQueryArgs {
  user: UserInputType
  type: String
}

type Mutation {
  createComment(createCommentInput: CreateCommentInput!): MessageResponse!
  createCommentReply(createReplyInput: CreateReplyInput!): MessageResponse!
  deleteComment(deleteCommentInput: DeleteCommentInput!): MessageResponse!
  updateNotification(updateNotificationArgs: NotificationUpdateArgs!): Boolean!
  createPost(createPostInput: CreatePostInput!): MessageResponse!
  updatePost(updatePostInput: UpdatePostInput!): MessageResponse!
  deletePost(updatePostInput: DeletePostInput!): MessageResponse!
  likeOrUnlikePost(likeOrUnlikePostInput: CreatePostOrCommentLikeInput!): MessageResponse!
  createUser(createUserInput: CreateUserInput!): String!
  updateUser(input: UpdateUserInput!, username: String!): MessageResponse!
  followUser(followOrUnFollowInput: FollowOrUnFollowInput!): MessageResponse!
  unFollowUser(followOrUnFollowInput: FollowOrUnFollowInput!): MessageResponse!
  login(loginInput: LoginInput!): LoginResponse!
  logout: MessageResponse!
  createFriendRequest(createFriendRequestInput: CreateFriendRequestInput!): FriendRequestResponse!
  closeFriendRequest(closeRequestInput: CloseRequestInput!): UserWithoutPassword!
}

input CreateCommentInput {
  postId: ID
  body: String!
  authId: UserInputType
}

input CreateReplyInput {
  postId: ID!
  userId: ID
  commentId: ID!
  body: String!
}

input DeleteCommentInput {
  commentId: ID!
  userID: ID!
}

input NotificationUpdateArgs {
  notifiId: ID!
  unread: Boolean! = false
}

input CreatePostInput {
  _author_id: UserInputType
  content: String
  photos: [PhotosImageInput!]
}

input UpdatePostInput {
  _author_id: UserInputType
  content: String
  photos: [PhotosImageInput!]
  likes: [UserInputType!]
  comments: [UserInputType!]

  """Created At"""
  createdAt: DateTime

  """Updated At"""
  updatedAt: DateTime
  user: ID
  postId: ID!
}

input DeletePostInput {
  user: ID
  postId: ID!
}

input CreatePostOrCommentLikeInput {
  user: ID
  postId: ID
  type: String
}

input CreateUserInput {
  email: String!
  name: String!
  username: String!
  password: String!
}

input UpdateUserInput {
  email: String
  name: String
  birthday: DateTime
  gender: EGender
  bio: String
  contact: String
  username: String
  avatar: AvatarImageInput
  coverPicture: CoverImageInput
  friends: UserInputType
  friendRequests: [FriendRequestInputType!] = []
  password: String
  role: String
}

input FollowOrUnFollowInput {
  userId: ID
  follow_ID: ID!
}

input LoginInput {
  email: String!
  password: String!
}

input CreateFriendRequestInput {
  user: ID
  target: ID
}

input CloseRequestInput {
  target: ID
  status: String!
}