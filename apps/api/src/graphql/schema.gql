# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input CloseRequestInput {
  status: String!
  target: ID
}

input CreateFriendRequestInput {
  target: ID
  user: ID
}

input CreateOrUpdateProfileInput {
  bio: String
  birthday: DateTime
  contact: String
  gender: EGender
  user: UserInputType
}

input CreatePostInput {
  author: ID
  content: String
  image: String
}

input CreateUserInput {
  email: String!
  name: String!
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeletePostInput {
  postId: ID!
  user: ID
}

enum EGender {
  female
  male
  unspecified
}

enum EnumService {
  Cloudinary
  S3Storage
  Web3Storage
}

type FriendRequestResponse {
  target: UserResponse!
  user: UserResponse!
}

type Info {
  bio: String
  birthday: DateTime
  contact: String
  gender: EGender
  id: ID!
  user: User
}

input InfoInputType {
  bio: String
  birthday: DateTime
  contact: String
  gender: EGender
  user: UserInputType
}

input LoginInput {
  email: String!
  password: String!
}

type LoginResponse {
  message: String!
}

type MessageResponse {
  message: String!
}

type Mutation {
  closeFriendRequest(closeRequestInput: CloseRequestInput!): UserWithoutPassword!
  createFriendRequest(createFriendRequestInput: CreateFriendRequestInput!): FriendRequestResponse!
  createOrUpdateInfo(createOrUpdateProfileInput: CreateOrUpdateProfileInput!): String!
  createPost(createPostInput: CreatePostInput!): MessageResponse!
  createUser(createUserInput: CreateUserInput!): String!
  deletePost(updatePostInput: DeletePostInput!): MessageResponse!
  login(loginInput: LoginInput!): LoginResponse!
  logout: MessageResponse!
  updatePost(updatePostInput: UpdatePostInput!): MessageResponse!
  updateUser(input: UpdateUserInput!): String!
  uploadMultipleFiles(files: [Upload!]!, setting: UploadParamInput!): [ResponseSingleUpload!]!
  uploadSingleFiles(file: Upload!): ResponseSingleUpload
}

type Post {
  author: ID
  comments: [User!]
  content: String
  id: ID!
  image: String
  likes: [User!]
}

type Query {
  item: String!
  me: UserWithoutPassword!
  post(postId: ID!): Post!
}

type ResponseSingleUpload {
  bytes: Float!
  folder: String!
  format: String!
  height: Float!
  url: String!
  width: Float!
}

input UpdatePostInput {
  author: ID
  comments: [UserInputType!]
  content: String
  id: ID
  image: String
  likes: [UserInputType!]
  postId: ID!
  user: ID
}

input UpdateUserInput {
  avatar: String
  coverPicture: String
  email: String
  friendRequests: UserInputType
  friends: UserInputType
  info: InfoInputType
  name: String
  password: String
  role: String
  username: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input UploadParamInput {
  folder: String!
  uploadService: EnumService!
}

type User {
  avatar: String
  coverPicture: String
  email: String!
  friendRequests: User
  friends: User
  info: Info
  name: String!
  password: String!
  role: String!
  username: String!
}

input UserInputType {
  avatar: String
  coverPicture: String
  email: String!
  friendRequests: UserInputType
  friends: UserInputType
  info: InfoInputType
  name: String!
  password: String!
  role: String!
  username: String!
}

type UserResponse {
  avatar: String!
  username: String!
}

type UserWithoutPassword {
  avatar: String
  coverPicture: String
  email: String!
  friendRequests: User
  friends: User
  info: Info
  name: String!
  role: String!
  username: String!
}