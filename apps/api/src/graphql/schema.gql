# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input CloseRequestInput {
  status: String!
  target: ID
}

input CreateCommentInput {
  authId: UserInputType
  body: String!
  postId: ID
}

input CreateFriendRequestInput {
  target: ID
  user: ID
}

input CreateOrUpdateProfileInput {
  bio: String
  birthday: DateTime
  contact: String
  gender: EGender
  user: UserInputType
}

input CreatePostInput {
  author: UserInputType
  content: String
  image: String
}

input CreatePostOrCommentLikeInput {
  postId: ID
  type: String
  user: ID
}

input CreateReplyInput {
  body: String!
  commentId: ID!
  postId: ID!
  userId: ID
}

input CreateUserInput {
  email: String!
  name: String!
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeleteCommentInput {
  commentId: ID!
  userID: ID!
}

input DeletePostInput {
  postId: ID!
  user: ID
}

enum EGender {
  female
  male
  unspecified
}

enum EnumService {
  Cloudinary
  S3Storage
  Web3Storage
}

input FollowOrUnFollowInput {
  follow_ID: ID!
  userId: ID
}

type FollowPagination {
  docs: [Pagination]
  hasNextPage: Boolean!
  hasPrevPage: Boolean!
  limit: Float!
  nextPage: Float
  page: Float!
  pagingCounter: Float!
  prevPage: Float
  totalDocs: Float!
  totalPages: Float!
}

input FollowQueryArgs {
  target: ID
  type: String
  user: ID
}

type FriendRequest {
  id: ID!
  target: User
  user: User
}

input FriendRequestInputType {
  target: UserInputType
  user: UserInputType
}

type FriendRequestResponse {
  target: UserResponse!
  user: UserResponse!
}

type IUser {
  _id: ID!
  avatar: String!
  coverPicture: String
  dateJoined: DateTime
  email: String
  info: Info
  isFollowing: Boolean!
  name: String!
  username: String!
}

type Info {
  bio: String
  birthday: DateTime
  contact: String
  gender: EGender
  id: ID!
  user: User
}

input InfoInputType {
  bio: String
  birthday: DateTime
  contact: String
  gender: EGender
  user: UserInputType
}

input LoginInput {
  email: String!
  password: String!
}

type LoginResponse {
  message: String!
}

type MessageResponse {
  message: String!
}

type Mutation {
  closeFriendRequest(closeRequestInput: CloseRequestInput!): UserWithoutPassword!
  createComment(createCommentInput: CreateCommentInput!): MessageResponse!
  createCommentReply(createReplyInput: CreateReplyInput!): MessageResponse!
  createFriendRequest(createFriendRequestInput: CreateFriendRequestInput!): FriendRequestResponse!
  createOrUpdateInfo(createOrUpdateProfileInput: CreateOrUpdateProfileInput!): String!
  createPost(createPostInput: CreatePostInput!): MessageResponse!
  createUser(createUserInput: CreateUserInput!): String!
  deleteComment(deleteCommentInput: DeleteCommentInput!): MessageResponse!
  deletePost(updatePostInput: DeletePostInput!): MessageResponse!
  followUser(followOrUnFollowInput: FollowOrUnFollowInput!): MessageResponse!
  likePost(likePostInput: CreatePostOrCommentLikeInput!): MessageResponse!
  login(loginInput: LoginInput!): LoginResponse!
  logout: MessageResponse!
  unFollowUser(followOrUnFollowInput: FollowOrUnFollowInput!): MessageResponse!
  updateNotification(updateNotificationArgs: NotificationUpdateArgs!): Boolean!
  updatePost(updatePostInput: UpdatePostInput!): MessageResponse!
  updateUser(input: UpdateUserInput!): String!
  uploadMultipleFiles(files: [Upload!]!, setting: UploadParamInput!): [ResponseSingleUpload!]!
  uploadSingleFiles(file: Upload!): ResponseSingleUpload
}

type Notification {
  id: ID!
  initiator: ID
  link: String
  target: ID
  type: NotificationType!
  unread: Boolean
}

type NotificationPagination {
  docs: [Notification]
  hasNextPage: Boolean!
  hasPrevPage: Boolean!
  limit: Float!
  nextPage: Float
  page: Float!
  pagingCounter: Float!
  prevPage: Float
  totalDocs: Float!
  totalPages: Float!
}

input NotificationQueryArgs {
  targetId: ID
  type: String
  unread: Boolean
  user: ID
}

enum NotificationType {
  comment
  commentLike
  follow
  like
  reply
}

input NotificationUpdateArgs {
  notifiId: ID!
  unread: Boolean! = false
}

input PaginateOptionArgs {
  allowDiskUse: Boolean
  forceCountFn: Boolean
  lean: Boolean
  leanWithId: Boolean
  limit: Float
  offset: Float
  page: Float
  pagination: Boolean
  select: String
  sort: String
  useEstimatedCount: Boolean
}

type Pagination {
  avatar: String!
  email: String!
  id: String!
  isFollowing: Boolean!
  name: String!
  username: String
}

type Post {
  author: User
  comments: [User!]
  content: String
  id: ID!
  image: String
  likes: [User!]
}

type ProfileInformation {
  avatar: String!
  coverPicture: String
  dateJoined: DateTime
  email: String
  followersCount: Float
  followingCount: Float
  id: ID!
  info: Info
  isFollowing: Boolean!
  name: String!
  username: String!
}

type Query {
  getFollowers(option: PaginateOptionArgs!, query: FollowQueryArgs!): [Pagination!]!
  getFollowing(option: PaginateOptionArgs!, query: FollowQueryArgs!): [Pagination!]!
  getSuggestionPeople(option: PaginateOptionArgs!, query: FollowQueryArgs!): FollowPagination!
  item: String!
  me: IUser!
  notifications(allowDiskUse: Boolean, forceCountFn: Boolean, lean: Boolean, leanWithId: Boolean, limit: Float, offset: Float, page: Float, pagination: Boolean, query: NotificationQueryArgs!, select: String, sort: String, useEstimatedCount: Boolean): NotificationPagination!
  post(postId: ID!): Post!
  user(username: String!): ProfileInformation
}

type ResponseSingleUpload {
  bytes: Float!
  folder: String!
  format: String!
  height: Float!
  url: String!
  width: Float!
}

input UpdatePostInput {
  author: UserInputType
  comments: [UserInputType!]
  content: String
  id: ID
  image: String
  likes: [UserInputType!]
  postId: ID!
  user: ID
}

input UpdateUserInput {
  avatar: String
  coverPicture: String
  email: String
  friendRequests: [FriendRequestInputType!] = []
  friends: UserInputType
  info: InfoInputType
  name: String
  password: String
  role: String
  username: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input UploadParamInput {
  folder: String!
  uploadService: EnumService!
}

type User {
  avatar: String
  coverPicture: String
  email: String!
  friendRequests: [FriendRequest!]
  friends: User
  info: Info
  name: String!
  password: String!
  role: String!
  username: String!
}

input UserInputType {
  avatar: String
  coverPicture: String
  email: String!
  friendRequests: [FriendRequestInputType!] = []
  friends: UserInputType
  info: InfoInputType
  name: String!
  password: String!
  role: String!
  username: String!
}

type UserResponse {
  avatar: String!
  username: String!
}

type UserWithoutPassword {
  avatar: String
  coverPicture: String
  email: String!
  friendRequests: [FriendRequest!]
  friends: User
  info: Info
  name: String!
  role: String!
  username: String!
}